// Mocks generated by Mockito 5.4.4 from annotations
// in pragma_technical_test/test/presentation/cubits/landing_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pragma_technical_test/core/error_handling/failure.dart' as _i6;
import 'package:pragma_technical_test/domain/entities/breed_entity.dart' as _i7;
import 'package:pragma_technical_test/domain/entities/image_breed_entity.dart'
    as _i10;
import 'package:pragma_technical_test/domain/repositories/breed_repository.dart'
    as _i2;
import 'package:pragma_technical_test/domain/use_cases/get_breeds_use_case.dart'
    as _i4;
import 'package:pragma_technical_test/domain/use_cases/get_image_breed_use_case.dart'
    as _i9;
import 'package:pragma_technical_test/domain/use_cases/search_breeds_use_case.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBreedRepository_0 extends _i1.SmartFake
    implements _i2.BreedRepository {
  _FakeBreedRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetBreedsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetBreedsUseCase extends _i1.Mock implements _i4.GetBreedsUseCase {
  MockGetBreedsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BreedRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBreedRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BreedRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.BreedEntity>>> call(
    int? page,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            page,
            limit,
          ],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.BreedEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.BreedEntity>>(
          this,
          Invocation.method(
            #call,
            [
              page,
              limit,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.BreedEntity>>>);
}

/// A class which mocks [SearchBreedsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchBreedsUseCase extends _i1.Mock
    implements _i8.SearchBreedsUseCase {
  MockSearchBreedsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BreedRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBreedRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BreedRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.BreedEntity>>> call(
    String? param1,
    int? param2,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [
            param1,
            param2,
          ],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, List<_i7.BreedEntity>>>.value(
                _FakeEither_1<_i6.Failure, List<_i7.BreedEntity>>(
          this,
          Invocation.method(
            #call,
            [
              param1,
              param2,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, List<_i7.BreedEntity>>>);
}

/// A class which mocks [GetImageBreedUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetImageBreedUseCase extends _i1.Mock
    implements _i9.GetImageBreedUseCase {
  MockGetImageBreedUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BreedRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeBreedRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.BreedRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i10.ImageBreedEntity>> call(
          String? referenceImageId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [referenceImageId],
        ),
        returnValue:
            _i5.Future<_i3.Either<_i6.Failure, _i10.ImageBreedEntity>>.value(
                _FakeEither_1<_i6.Failure, _i10.ImageBreedEntity>(
          this,
          Invocation.method(
            #call,
            [referenceImageId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i6.Failure, _i10.ImageBreedEntity>>);
}
